const user = require('../services/userService');
const auth = require('../services/authService');
const bcrypt = require('bcrypt');
const config = require('../config/config');
const jwt = require('jsonwebtoken');

exports.processLogin = async (req, res, next) => {

    let email = req.body.email;
    let password = req.body.password;
    // if the email is null
    try {
        const authentication = await auth.authenticate(email);
        console.log(authentication);

        console.log("email is verifying.");

        if (authentication.length === 1) {

            if (!password) {
                return res.status(500).json({ message: 'login failed' });
            }
            if (bcrypt.compareSync(password, authentication[0].user_password)) {
                console.log("authenticating password");
                let data = {
                    user_id: authentication[0].user_id,
                    role_name: authentication[0].role_name,
                    token: jwt.sign({ id: authentication[0].user_id }, config.JWTKey, {
                        expiresIn: 86400 //Expires in 24 hrs
                    })
                }; //End of data variable setup
                console.log("authenticating password complete");
                return res.status(200).json(data);
            }
            else {
                return res.status(500).json({ message: authentication[0].user_id + " login has failed" });
            }
        }
        return res.status(200).json(ee);
    }
    catch (error) {
        console.error(error);
        return res.status(500).json({ message: error });
    } //end of try
};

// If user submitted data, run the code in below
exports.processRegister = (req, res, next) => {
    console.log('processRegister running');
    let fullName = req.body.fullName;
    let email = req.body.email;
    let password = req.body.password;


    bcrypt.hash(password, 10, async (err, hash) => {
        if (err) {
            console.log('Error on hashing password');
            return res.status(500).json({ message: 'Unable to complete registration' });
        } else {
            try {
                results = await user.createUser(fullName, email, hash);
                console.log(results);
                return res.status(200).json({ message: 'Completed registration' });
            } catch (error) {
                console.log('processRegister method : catch block section code is running');
                console.log(error, '=======================================================================');
                return res.status(500).json({ message: 'Unable to complete registration' });
            }
        }
    });


}; //End of processRegister